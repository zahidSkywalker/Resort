generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  passwordHash String?
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reservations Reservation[]
  accounts  Account[]
  sessions  Session[]
}

model RoomType {
  id          String   @id @default(cuid())
  name        String
  description String
  basePrice   Int
  images      String
  rooms       Room[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Room {
  id          String   @id @default(cuid())
  roomNumber  String   @unique
  roomTypeId  String
  roomType    RoomType @relation(fields: [roomTypeId], references: [id])
  reservations Reservation[]
}

model Reservation {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  roomId      String?
  room        Room?    @relation(fields: [roomId], references: [id])
  checkIn     DateTime
  checkOut    DateTime
  adults      Int
  children    Int
  totalAmount Int
  currency    String   @default("USD")
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


